# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BankAccountType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type=None, owner_address=None, owner_name=None, iban=None, bic=None):
        """
        BankAccountType - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',
            'owner_address': 'Address',
            'owner_name': 'str',
            'iban': 'str',
            'bic': 'str'
        }

        self.attribute_map = {
            'type': 'Type',
            'owner_address': 'OwnerAddress',
            'owner_name': 'OwnerName',
            'iban': 'IBAN',
            'bic': 'BIC'
        }

        self._type = type
        self._owner_address = owner_address
        self._owner_name = owner_name
        self._iban = iban
        self._bic = bic

    @property
    def type(self):
        """
        Gets the type of this BankAccountType.

        :return: The type of this BankAccountType.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this BankAccountType.

        :param type: The type of this BankAccountType.
        :type: str
        """
        allowed_values = ["IBAN", "GB", "US", "CA", "OTHER"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def owner_address(self):
        """
        Gets the owner_address of this BankAccountType.

        :return: The owner_address of this BankAccountType.
        :rtype: Address
        """
        return self._owner_address

    @owner_address.setter
    def owner_address(self, owner_address):
        """
        Sets the owner_address of this BankAccountType.

        :param owner_address: The owner_address of this BankAccountType.
        :type: Address
        """

        self._owner_address = owner_address

    @property
    def owner_name(self):
        """
        Gets the owner_name of this BankAccountType.

        :return: The owner_name of this BankAccountType.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """
        Sets the owner_name of this BankAccountType.

        :param owner_name: The owner_name of this BankAccountType.
        :type: str
        """

        self._owner_name = owner_name

    @property
    def iban(self):
        """
        Gets the iban of this BankAccountType.

        :return: The iban of this BankAccountType.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """
        Sets the iban of this BankAccountType.

        :param iban: The iban of this BankAccountType.
        :type: str
        """

        self._iban = iban

    @property
    def bic(self):
        """
        Gets the bic of this BankAccountType.

        :return: The bic of this BankAccountType.
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """
        Sets the bic of this BankAccountType.

        :param bic: The bic of this BankAccountType.
        :type: str
        """

        self._bic = bic

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BankAccountType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
