# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, person_type=None, email=None, kyc_level=None, id=None, creation_date=None, tag=None):
        """
        UserResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'person_type': 'str',
            'email': 'str',
            'kyc_level': 'str',
            'id': 'str',
            'creation_date': 'int',
            'tag': 'str'
        }

        self.attribute_map = {
            'person_type': 'PersonType',
            'email': 'Email',
            'kyc_level': 'KYCLevel',
            'id': 'Id',
            'creation_date': 'CreationDate',
            'tag': 'Tag'
        }

        self._person_type = person_type
        self._email = email
        self._kyc_level = kyc_level
        self._id = id
        self._creation_date = creation_date
        self._tag = tag

    @property
    def person_type(self):
        """
        Gets the person_type of this UserResponse.
        Type of user

        :return: The person_type of this UserResponse.
        :rtype: str
        """
        return self._person_type

    @person_type.setter
    def person_type(self, person_type):
        """
        Sets the person_type of this UserResponse.
        Type of user

        :param person_type: The person_type of this UserResponse.
        :type: str
        """
        allowed_values = ["Natural", "Legal"]
        if person_type not in allowed_values:
            raise ValueError(
                "Invalid value for `person_type` ({0}), must be one of {1}"
                .format(person_type, allowed_values)
            )

        self._person_type = person_type

    @property
    def email(self):
        """
        Gets the email of this UserResponse.
        The user's email address - must be a valid email

        :return: The email of this UserResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UserResponse.
        The user's email address - must be a valid email

        :param email: The email of this UserResponse.
        :type: str
        """

        self._email = email

    @property
    def kyc_level(self):
        """
        Gets the kyc_level of this UserResponse.
        

        :return: The kyc_level of this UserResponse.
        :rtype: str
        """
        return self._kyc_level

    @kyc_level.setter
    def kyc_level(self, kyc_level):
        """
        Sets the kyc_level of this UserResponse.
        

        :param kyc_level: The kyc_level of this UserResponse.
        :type: str
        """
        allowed_values = ["NotSpecified", "LIGHT", "REGULAR"]
        if kyc_level not in allowed_values:
            raise ValueError(
                "Invalid value for `kyc_level` ({0}), must be one of {1}"
                .format(kyc_level, allowed_values)
            )

        self._kyc_level = kyc_level

    @property
    def id(self):
        """
        Gets the id of this UserResponse.
        The item's ID

        :return: The id of this UserResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this UserResponse.
        The item's ID

        :param id: The id of this UserResponse.
        :type: str
        """

        self._id = id

    @property
    def creation_date(self):
        """
        Gets the creation_date of this UserResponse.
        When the item was created

        :return: The creation_date of this UserResponse.
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """
        Sets the creation_date of this UserResponse.
        When the item was created

        :param creation_date: The creation_date of this UserResponse.
        :type: int
        """

        self._creation_date = creation_date

    @property
    def tag(self):
        """
        Gets the tag of this UserResponse.
        Custom data that you can add to this item

        :return: The tag of this UserResponse.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this UserResponse.
        Custom data that you can add to this item

        :param tag: The tag of this UserResponse.
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
