# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SeurShipmentResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, locator_number=None, quotation=None, status=None, status_pick_up=None, status_pick_up_code=None, status_delivery=None, status_delivery_code=None, id=None, creation_date=None, tag=None):
        """
        SeurShipmentResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'locator_number': 'str',
            'quotation': 'int',
            'status': 'str',
            'status_pick_up': 'str',
            'status_pick_up_code': 'str',
            'status_delivery': 'str',
            'status_delivery_code': 'str',
            'id': 'str',
            'creation_date': 'int',
            'tag': 'str'
        }

        self.attribute_map = {
            'locator_number': 'LocatorNumber',
            'quotation': 'Quotation',
            'status': 'Status',
            'status_pick_up': 'StatusPickUp',
            'status_pick_up_code': 'StatusPickUpCode',
            'status_delivery': 'StatusDelivery',
            'status_delivery_code': 'StatusDeliveryCode',
            'id': 'Id',
            'creation_date': 'CreationDate',
            'tag': 'Tag'
        }

        self._locator_number = locator_number
        self._quotation = quotation
        self._status = status
        self._status_pick_up = status_pick_up
        self._status_pick_up_code = status_pick_up_code
        self._status_delivery = status_delivery
        self._status_delivery_code = status_delivery_code
        self._id = id
        self._creation_date = creation_date
        self._tag = tag

    @property
    def locator_number(self):
        """
        Gets the locator_number of this SeurShipmentResponse.
        NumRecogida. Utilizar el id de base de datos

        :return: The locator_number of this SeurShipmentResponse.
        :rtype: str
        """
        return self._locator_number

    @locator_number.setter
    def locator_number(self, locator_number):
        """
        Sets the locator_number of this SeurShipmentResponse.
        NumRecogida. Utilizar el id de base de datos

        :param locator_number: The locator_number of this SeurShipmentResponse.
        :type: str
        """

        self._locator_number = locator_number

    @property
    def quotation(self):
        """
        Gets the quotation of this SeurShipmentResponse.
        Tasacion

        :return: The quotation of this SeurShipmentResponse.
        :rtype: int
        """
        return self._quotation

    @quotation.setter
    def quotation(self, quotation):
        """
        Sets the quotation of this SeurShipmentResponse.
        Tasacion

        :param quotation: The quotation of this SeurShipmentResponse.
        :type: int
        """

        self._quotation = quotation

    @property
    def status(self):
        """
        Gets the status of this SeurShipmentResponse.
        The status of the transaction

        :return: The status of this SeurShipmentResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this SeurShipmentResponse.
        The status of the transaction

        :param status: The status of this SeurShipmentResponse.
        :type: str
        """
        allowed_values = ["CREATED", "SUCCEEDED", "FAILED", "CANCELED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_pick_up(self):
        """
        Gets the status_pick_up of this SeurShipmentResponse.
        

        :return: The status_pick_up of this SeurShipmentResponse.
        :rtype: str
        """
        return self._status_pick_up

    @status_pick_up.setter
    def status_pick_up(self, status_pick_up):
        """
        Sets the status_pick_up of this SeurShipmentResponse.
        

        :param status_pick_up: The status_pick_up of this SeurShipmentResponse.
        :type: str
        """
        allowed_values = ["Unknown", "Ready", "Started", "Failed", "Picked"]
        if status_pick_up not in allowed_values:
            raise ValueError(
                "Invalid value for `status_pick_up` ({0}), must be one of {1}"
                .format(status_pick_up, allowed_values)
            )

        self._status_pick_up = status_pick_up

    @property
    def status_pick_up_code(self):
        """
        Gets the status_pick_up_code of this SeurShipmentResponse.
        

        :return: The status_pick_up_code of this SeurShipmentResponse.
        :rtype: str
        """
        return self._status_pick_up_code

    @status_pick_up_code.setter
    def status_pick_up_code(self, status_pick_up_code):
        """
        Sets the status_pick_up_code of this SeurShipmentResponse.
        

        :param status_pick_up_code: The status_pick_up_code of this SeurShipmentResponse.
        :type: str
        """

        self._status_pick_up_code = status_pick_up_code

    @property
    def status_delivery(self):
        """
        Gets the status_delivery of this SeurShipmentResponse.
        

        :return: The status_delivery of this SeurShipmentResponse.
        :rtype: str
        """
        return self._status_delivery

    @status_delivery.setter
    def status_delivery(self, status_delivery):
        """
        Sets the status_delivery of this SeurShipmentResponse.
        

        :param status_delivery: The status_delivery of this SeurShipmentResponse.
        :type: str
        """
        allowed_values = ["Unknown", "Ready", "Delivered"]
        if status_delivery not in allowed_values:
            raise ValueError(
                "Invalid value for `status_delivery` ({0}), must be one of {1}"
                .format(status_delivery, allowed_values)
            )

        self._status_delivery = status_delivery

    @property
    def status_delivery_code(self):
        """
        Gets the status_delivery_code of this SeurShipmentResponse.
        

        :return: The status_delivery_code of this SeurShipmentResponse.
        :rtype: str
        """
        return self._status_delivery_code

    @status_delivery_code.setter
    def status_delivery_code(self, status_delivery_code):
        """
        Sets the status_delivery_code of this SeurShipmentResponse.
        

        :param status_delivery_code: The status_delivery_code of this SeurShipmentResponse.
        :type: str
        """

        self._status_delivery_code = status_delivery_code

    @property
    def id(self):
        """
        Gets the id of this SeurShipmentResponse.

        :return: The id of this SeurShipmentResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SeurShipmentResponse.

        :param id: The id of this SeurShipmentResponse.
        :type: str
        """

        self._id = id

    @property
    def creation_date(self):
        """
        Gets the creation_date of this SeurShipmentResponse.

        :return: The creation_date of this SeurShipmentResponse.
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """
        Sets the creation_date of this SeurShipmentResponse.

        :param creation_date: The creation_date of this SeurShipmentResponse.
        :type: int
        """

        self._creation_date = creation_date

    @property
    def tag(self):
        """
        Gets the tag of this SeurShipmentResponse.

        :return: The tag of this SeurShipmentResponse.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this SeurShipmentResponse.

        :param tag: The tag of this SeurShipmentResponse.
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SeurShipmentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
