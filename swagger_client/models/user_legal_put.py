# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserLegalPut(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, headquarters_address=None, legal_person_type=None, name=None, legal_representative_address=None, legal_representative_birthday=None, legal_representative_country_of_residence=None, legal_representative_nationality=None, legal_representative_email=None, legal_representative_first_name=None, legal_representative_last_name=None, tag=None):
        """
        UserLegalPut - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'headquarters_address': 'Address',
            'legal_person_type': 'str',
            'name': 'str',
            'legal_representative_address': 'Address',
            'legal_representative_birthday': 'int',
            'legal_representative_country_of_residence': 'str',
            'legal_representative_nationality': 'str',
            'legal_representative_email': 'str',
            'legal_representative_first_name': 'str',
            'legal_representative_last_name': 'str',
            'tag': 'str'
        }

        self.attribute_map = {
            'headquarters_address': 'HeadquartersAddress',
            'legal_person_type': 'LegalPersonType',
            'name': 'Name',
            'legal_representative_address': 'LegalRepresentativeAddress',
            'legal_representative_birthday': 'LegalRepresentativeBirthday',
            'legal_representative_country_of_residence': 'LegalRepresentativeCountryOfResidence',
            'legal_representative_nationality': 'LegalRepresentativeNationality',
            'legal_representative_email': 'LegalRepresentativeEmail',
            'legal_representative_first_name': 'LegalRepresentativeFirstName',
            'legal_representative_last_name': 'LegalRepresentativeLastName',
            'tag': 'Tag'
        }

        self._headquarters_address = headquarters_address
        self._legal_person_type = legal_person_type
        self._name = name
        self._legal_representative_address = legal_representative_address
        self._legal_representative_birthday = legal_representative_birthday
        self._legal_representative_country_of_residence = legal_representative_country_of_residence
        self._legal_representative_nationality = legal_representative_nationality
        self._legal_representative_email = legal_representative_email
        self._legal_representative_first_name = legal_representative_first_name
        self._legal_representative_last_name = legal_representative_last_name
        self._tag = tag

    @property
    def headquarters_address(self):
        """
        Gets the headquarters_address of this UserLegalPut.
        he address of the company’s headquarters

        :return: The headquarters_address of this UserLegalPut.
        :rtype: Address
        """
        return self._headquarters_address

    @headquarters_address.setter
    def headquarters_address(self, headquarters_address):
        """
        Sets the headquarters_address of this UserLegalPut.
        he address of the company’s headquarters

        :param headquarters_address: The headquarters_address of this UserLegalPut.
        :type: Address
        """

        self._headquarters_address = headquarters_address

    @property
    def legal_person_type(self):
        """
        Gets the legal_person_type of this UserLegalPut.
        The type of legal user

        :return: The legal_person_type of this UserLegalPut.
        :rtype: str
        """
        return self._legal_person_type

    @legal_person_type.setter
    def legal_person_type(self, legal_person_type):
        """
        Sets the legal_person_type of this UserLegalPut.
        The type of legal user

        :param legal_person_type: The legal_person_type of this UserLegalPut.
        :type: str
        """
        allowed_values = ["BUSINESS", "ORGANIZATION", "SOLETRADER"]
        if legal_person_type not in allowed_values:
            raise ValueError(
                "Invalid value for `legal_person_type` ({0}), must be one of {1}"
                .format(legal_person_type, allowed_values)
            )

        self._legal_person_type = legal_person_type

    @property
    def name(self):
        """
        Gets the name of this UserLegalPut.
        The name of the legal user

        :return: The name of this UserLegalPut.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this UserLegalPut.
        The name of the legal user

        :param name: The name of this UserLegalPut.
        :type: str
        """

        self._name = name

    @property
    def legal_representative_address(self):
        """
        Gets the legal_representative_address of this UserLegalPut.
        The address of the company’s Legal representative person

        :return: The legal_representative_address of this UserLegalPut.
        :rtype: Address
        """
        return self._legal_representative_address

    @legal_representative_address.setter
    def legal_representative_address(self, legal_representative_address):
        """
        Sets the legal_representative_address of this UserLegalPut.
        The address of the company’s Legal representative person

        :param legal_representative_address: The legal_representative_address of this UserLegalPut.
        :type: Address
        """

        self._legal_representative_address = legal_representative_address

    @property
    def legal_representative_birthday(self):
        """
        Gets the legal_representative_birthday of this UserLegalPut.
        The date of birth of the company’s Legal representative person - be careful to set the right timezone (should be UTC) to avoid 00h becoming 23h (and hence interpreted as the day before)

        :return: The legal_representative_birthday of this UserLegalPut.
        :rtype: int
        """
        return self._legal_representative_birthday

    @legal_representative_birthday.setter
    def legal_representative_birthday(self, legal_representative_birthday):
        """
        Sets the legal_representative_birthday of this UserLegalPut.
        The date of birth of the company’s Legal representative person - be careful to set the right timezone (should be UTC) to avoid 00h becoming 23h (and hence interpreted as the day before)

        :param legal_representative_birthday: The legal_representative_birthday of this UserLegalPut.
        :type: int
        """

        self._legal_representative_birthday = legal_representative_birthday

    @property
    def legal_representative_country_of_residence(self):
        """
        Gets the legal_representative_country_of_residence of this UserLegalPut.
        The country of residence of the company’s Legal representative person

        :return: The legal_representative_country_of_residence of this UserLegalPut.
        :rtype: str
        """
        return self._legal_representative_country_of_residence

    @legal_representative_country_of_residence.setter
    def legal_representative_country_of_residence(self, legal_representative_country_of_residence):
        """
        Sets the legal_representative_country_of_residence of this UserLegalPut.
        The country of residence of the company’s Legal representative person

        :param legal_representative_country_of_residence: The legal_representative_country_of_residence of this UserLegalPut.
        :type: str
        """
        allowed_values = ["NotSpecified", "AD", "AE", "AF", "AG", "AI", "AL", "AM", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"]
        if legal_representative_country_of_residence not in allowed_values:
            raise ValueError(
                "Invalid value for `legal_representative_country_of_residence` ({0}), must be one of {1}"
                .format(legal_representative_country_of_residence, allowed_values)
            )

        self._legal_representative_country_of_residence = legal_representative_country_of_residence

    @property
    def legal_representative_nationality(self):
        """
        Gets the legal_representative_nationality of this UserLegalPut.
        The nationality of the company’s Legal representative person

        :return: The legal_representative_nationality of this UserLegalPut.
        :rtype: str
        """
        return self._legal_representative_nationality

    @legal_representative_nationality.setter
    def legal_representative_nationality(self, legal_representative_nationality):
        """
        Sets the legal_representative_nationality of this UserLegalPut.
        The nationality of the company’s Legal representative person

        :param legal_representative_nationality: The legal_representative_nationality of this UserLegalPut.
        :type: str
        """
        allowed_values = ["NotSpecified", "AD", "AE", "AF", "AG", "AI", "AL", "AM", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"]
        if legal_representative_nationality not in allowed_values:
            raise ValueError(
                "Invalid value for `legal_representative_nationality` ({0}), must be one of {1}"
                .format(legal_representative_nationality, allowed_values)
            )

        self._legal_representative_nationality = legal_representative_nationality

    @property
    def legal_representative_email(self):
        """
        Gets the legal_representative_email of this UserLegalPut.
        The email of the company’s Legal representative person - must be a valid

        :return: The legal_representative_email of this UserLegalPut.
        :rtype: str
        """
        return self._legal_representative_email

    @legal_representative_email.setter
    def legal_representative_email(self, legal_representative_email):
        """
        Sets the legal_representative_email of this UserLegalPut.
        The email of the company’s Legal representative person - must be a valid

        :param legal_representative_email: The legal_representative_email of this UserLegalPut.
        :type: str
        """

        self._legal_representative_email = legal_representative_email

    @property
    def legal_representative_first_name(self):
        """
        Gets the legal_representative_first_name of this UserLegalPut.
        The firstname of the company’s Legal representative person

        :return: The legal_representative_first_name of this UserLegalPut.
        :rtype: str
        """
        return self._legal_representative_first_name

    @legal_representative_first_name.setter
    def legal_representative_first_name(self, legal_representative_first_name):
        """
        Sets the legal_representative_first_name of this UserLegalPut.
        The firstname of the company’s Legal representative person

        :param legal_representative_first_name: The legal_representative_first_name of this UserLegalPut.
        :type: str
        """

        self._legal_representative_first_name = legal_representative_first_name

    @property
    def legal_representative_last_name(self):
        """
        Gets the legal_representative_last_name of this UserLegalPut.
        The lastname of the company’s Legal representative person

        :return: The legal_representative_last_name of this UserLegalPut.
        :rtype: str
        """
        return self._legal_representative_last_name

    @legal_representative_last_name.setter
    def legal_representative_last_name(self, legal_representative_last_name):
        """
        Sets the legal_representative_last_name of this UserLegalPut.
        The lastname of the company’s Legal representative person

        :param legal_representative_last_name: The legal_representative_last_name of this UserLegalPut.
        :type: str
        """

        self._legal_representative_last_name = legal_representative_last_name

    @property
    def tag(self):
        """
        Gets the tag of this UserLegalPut.
        Custom data that you can add to this item

        :return: The tag of this UserLegalPut.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this UserLegalPut.
        Custom data that you can add to this item

        :param tag: The tag of this UserLegalPut.
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserLegalPut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
