# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BankAccountUsPost(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, account_number=None, aba=None, deposit_account_type=None, tag=None, owner_address=None, owner_name=None):
        """
        BankAccountUsPost - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'account_number': 'str',
            'aba': 'str',
            'deposit_account_type': 'str',
            'tag': 'str',
            'owner_address': 'Address',
            'owner_name': 'str'
        }

        self.attribute_map = {
            'account_number': 'AccountNumber',
            'aba': 'ABA',
            'deposit_account_type': 'DepositAccountType',
            'tag': 'Tag',
            'owner_address': 'OwnerAddress',
            'owner_name': 'OwnerName'
        }

        self._account_number = account_number
        self._aba = aba
        self._deposit_account_type = deposit_account_type
        self._tag = tag
        self._owner_address = owner_address
        self._owner_name = owner_name

    @property
    def account_number(self):
        """
        Gets the account_number of this BankAccountUsPost.
        The account number of the bank account. US account numbers must be digits only

        :return: The account_number of this BankAccountUsPost.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """
        Sets the account_number of this BankAccountUsPost.
        The account number of the bank account. US account numbers must be digits only

        :param account_number: The account_number of this BankAccountUsPost.
        :type: str
        """

        self._account_number = account_number

    @property
    def aba(self):
        """
        Gets the aba of this BankAccountUsPost.
        The ABA of the bank account. Must be numbers only, and 9 digits long

        :return: The aba of this BankAccountUsPost.
        :rtype: str
        """
        return self._aba

    @aba.setter
    def aba(self, aba):
        """
        Sets the aba of this BankAccountUsPost.
        The ABA of the bank account. Must be numbers only, and 9 digits long

        :param aba: The aba of this BankAccountUsPost.
        :type: str
        """

        self._aba = aba

    @property
    def deposit_account_type(self):
        """
        Gets the deposit_account_type of this BankAccountUsPost.
        The type of account

        :return: The deposit_account_type of this BankAccountUsPost.
        :rtype: str
        """
        return self._deposit_account_type

    @deposit_account_type.setter
    def deposit_account_type(self, deposit_account_type):
        """
        Sets the deposit_account_type of this BankAccountUsPost.
        The type of account

        :param deposit_account_type: The deposit_account_type of this BankAccountUsPost.
        :type: str
        """
        allowed_values = ["NotSpecified", "CHECKING", "SAVINGS"]
        if deposit_account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `deposit_account_type` ({0}), must be one of {1}"
                .format(deposit_account_type, allowed_values)
            )

        self._deposit_account_type = deposit_account_type

    @property
    def tag(self):
        """
        Gets the tag of this BankAccountUsPost.
        Custom data that you can add to this item

        :return: The tag of this BankAccountUsPost.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this BankAccountUsPost.
        Custom data that you can add to this item

        :param tag: The tag of this BankAccountUsPost.
        :type: str
        """

        self._tag = tag

    @property
    def owner_address(self):
        """
        Gets the owner_address of this BankAccountUsPost.
        The address of the owner of the bank account

        :return: The owner_address of this BankAccountUsPost.
        :rtype: Address
        """
        return self._owner_address

    @owner_address.setter
    def owner_address(self, owner_address):
        """
        Sets the owner_address of this BankAccountUsPost.
        The address of the owner of the bank account

        :param owner_address: The owner_address of this BankAccountUsPost.
        :type: Address
        """

        self._owner_address = owner_address

    @property
    def owner_name(self):
        """
        Gets the owner_name of this BankAccountUsPost.
        The name of the owner of the bank account

        :return: The owner_name of this BankAccountUsPost.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """
        Sets the owner_name of this BankAccountUsPost.
        The name of the owner of the bank account

        :param owner_name: The owner_name of this BankAccountUsPost.
        :type: str
        """

        self._owner_name = owner_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
