# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RedsysRefundPost(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, tag=None, debited_funds=None, fees=None):
        """
        RedsysRefundPost - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'tag': 'str',
            'debited_funds': 'Money',
            'fees': 'Money'
        }

        self.attribute_map = {
            'tag': 'Tag',
            'debited_funds': 'DebitedFunds',
            'fees': 'Fees'
        }

        self._tag = tag
        self._debited_funds = debited_funds
        self._fees = fees

    @property
    def tag(self):
        """
        Gets the tag of this RedsysRefundPost.
        Custom data that you can add to this item

        :return: The tag of this RedsysRefundPost.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this RedsysRefundPost.
        Custom data that you can add to this item

        :param tag: The tag of this RedsysRefundPost.
        :type: str
        """

        self._tag = tag

    @property
    def debited_funds(self):
        """
        Gets the debited_funds of this RedsysRefundPost.
        Information about the funds that are being debited

        :return: The debited_funds of this RedsysRefundPost.
        :rtype: Money
        """
        return self._debited_funds

    @debited_funds.setter
    def debited_funds(self, debited_funds):
        """
        Sets the debited_funds of this RedsysRefundPost.
        Information about the funds that are being debited

        :param debited_funds: The debited_funds of this RedsysRefundPost.
        :type: Money
        """

        self._debited_funds = debited_funds

    @property
    def fees(self):
        """
        Gets the fees of this RedsysRefundPost.
        Information about the fees that were taken by the client for this transaction (and were hence transferred to the Client's platform wallet)

        :return: The fees of this RedsysRefundPost.
        :rtype: Money
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """
        Sets the fees of this RedsysRefundPost.
        Information about the fees that were taken by the client for this transaction (and were hence transferred to the Client's platform wallet)

        :param fees: The fees of this RedsysRefundPost.
        :type: Money
        """

        self._fees = fees

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RedsysRefundPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
