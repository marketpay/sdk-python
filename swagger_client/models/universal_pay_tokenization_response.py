# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UniversalPayTokenizationResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credited_wallet_id': 'str',
        'status': 'str',
        'execution_date': 'int',
        'result_code': 'str',
        'result_message': 'str',
        'execution_type': 'str',
        'author_id': 'str',
        'credited_user_id': 'str',
        'provider': 'TokenUniversalPayData',
        'card_id': 'str'
    }

    attribute_map = {
        'credited_wallet_id': 'CreditedWalletId',
        'status': 'Status',
        'execution_date': 'ExecutionDate',
        'result_code': 'ResultCode',
        'result_message': 'ResultMessage',
        'execution_type': 'ExecutionType',
        'author_id': 'AuthorId',
        'credited_user_id': 'CreditedUserId',
        'provider': 'Provider',
        'card_id': 'CardId'
    }

    def __init__(self, credited_wallet_id=None, status=None, execution_date=None, result_code=None, result_message=None, execution_type=None, author_id=None, credited_user_id=None, provider=None, card_id=None):
        """
        UniversalPayTokenizationResponse - a model defined in Swagger
        """

        self._credited_wallet_id = None
        self._status = None
        self._execution_date = None
        self._result_code = None
        self._result_message = None
        self._execution_type = None
        self._author_id = None
        self._credited_user_id = None
        self._provider = None
        self._card_id = None

        if credited_wallet_id is not None:
          self.credited_wallet_id = credited_wallet_id
        if status is not None:
          self.status = status
        if execution_date is not None:
          self.execution_date = execution_date
        if result_code is not None:
          self.result_code = result_code
        if result_message is not None:
          self.result_message = result_message
        if execution_type is not None:
          self.execution_type = execution_type
        if author_id is not None:
          self.author_id = author_id
        if credited_user_id is not None:
          self.credited_user_id = credited_user_id
        if provider is not None:
          self.provider = provider
        if card_id is not None:
          self.card_id = card_id

    @property
    def credited_wallet_id(self):
        """
        Gets the credited_wallet_id of this UniversalPayTokenizationResponse.
        The ID of the wallet where money will be credited

        :return: The credited_wallet_id of this UniversalPayTokenizationResponse.
        :rtype: str
        """
        return self._credited_wallet_id

    @credited_wallet_id.setter
    def credited_wallet_id(self, credited_wallet_id):
        """
        Sets the credited_wallet_id of this UniversalPayTokenizationResponse.
        The ID of the wallet where money will be credited

        :param credited_wallet_id: The credited_wallet_id of this UniversalPayTokenizationResponse.
        :type: str
        """

        self._credited_wallet_id = credited_wallet_id

    @property
    def status(self):
        """
        Gets the status of this UniversalPayTokenizationResponse.
        The status of the transaction

        :return: The status of this UniversalPayTokenizationResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this UniversalPayTokenizationResponse.
        The status of the transaction

        :param status: The status of this UniversalPayTokenizationResponse.
        :type: str
        """
        allowed_values = ["CREATED", "SUCCEEDED", "FAILED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def execution_date(self):
        """
        Gets the execution_date of this UniversalPayTokenizationResponse.
        When the transaction happened

        :return: The execution_date of this UniversalPayTokenizationResponse.
        :rtype: int
        """
        return self._execution_date

    @execution_date.setter
    def execution_date(self, execution_date):
        """
        Sets the execution_date of this UniversalPayTokenizationResponse.
        When the transaction happened

        :param execution_date: The execution_date of this UniversalPayTokenizationResponse.
        :type: int
        """

        self._execution_date = execution_date

    @property
    def result_code(self):
        """
        Gets the result_code of this UniversalPayTokenizationResponse.
        The result code

        :return: The result_code of this UniversalPayTokenizationResponse.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """
        Sets the result_code of this UniversalPayTokenizationResponse.
        The result code

        :param result_code: The result_code of this UniversalPayTokenizationResponse.
        :type: str
        """

        self._result_code = result_code

    @property
    def result_message(self):
        """
        Gets the result_message of this UniversalPayTokenizationResponse.
        A verbal explanation of the ResultCode

        :return: The result_message of this UniversalPayTokenizationResponse.
        :rtype: str
        """
        return self._result_message

    @result_message.setter
    def result_message(self, result_message):
        """
        Sets the result_message of this UniversalPayTokenizationResponse.
        A verbal explanation of the ResultCode

        :param result_message: The result_message of this UniversalPayTokenizationResponse.
        :type: str
        """

        self._result_message = result_message

    @property
    def execution_type(self):
        """
        Gets the execution_type of this UniversalPayTokenizationResponse.
        The type of execution for the payin

        :return: The execution_type of this UniversalPayTokenizationResponse.
        :rtype: str
        """
        return self._execution_type

    @execution_type.setter
    def execution_type(self, execution_type):
        """
        Sets the execution_type of this UniversalPayTokenizationResponse.
        The type of execution for the payin

        :param execution_type: The execution_type of this UniversalPayTokenizationResponse.
        :type: str
        """
        allowed_values = ["NotSpecified", "WEB", "DIRECT"]
        if execution_type not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_type` ({0}), must be one of {1}"
                .format(execution_type, allowed_values)
            )

        self._execution_type = execution_type

    @property
    def author_id(self):
        """
        Gets the author_id of this UniversalPayTokenizationResponse.
        A user's ID

        :return: The author_id of this UniversalPayTokenizationResponse.
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """
        Sets the author_id of this UniversalPayTokenizationResponse.
        A user's ID

        :param author_id: The author_id of this UniversalPayTokenizationResponse.
        :type: str
        """

        self._author_id = author_id

    @property
    def credited_user_id(self):
        """
        Gets the credited_user_id of this UniversalPayTokenizationResponse.
        The user ID who was credited

        :return: The credited_user_id of this UniversalPayTokenizationResponse.
        :rtype: str
        """
        return self._credited_user_id

    @credited_user_id.setter
    def credited_user_id(self, credited_user_id):
        """
        Sets the credited_user_id of this UniversalPayTokenizationResponse.
        The user ID who was credited

        :param credited_user_id: The credited_user_id of this UniversalPayTokenizationResponse.
        :type: str
        """

        self._credited_user_id = credited_user_id

    @property
    def provider(self):
        """
        Gets the provider of this UniversalPayTokenizationResponse.

        :return: The provider of this UniversalPayTokenizationResponse.
        :rtype: TokenUniversalPayData
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this UniversalPayTokenizationResponse.

        :param provider: The provider of this UniversalPayTokenizationResponse.
        :type: TokenUniversalPayData
        """

        self._provider = provider

    @property
    def card_id(self):
        """
        Gets the card_id of this UniversalPayTokenizationResponse.

        :return: The card_id of this UniversalPayTokenizationResponse.
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """
        Sets the card_id of this UniversalPayTokenizationResponse.

        :param card_id: The card_id of this UniversalPayTokenizationResponse.
        :type: str
        """

        self._card_id = card_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UniversalPayTokenizationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
