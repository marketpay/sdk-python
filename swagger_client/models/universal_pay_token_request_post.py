# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UniversalPayTokenRequestPost(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, authorization_funds=None, tag=None, credited_wallet_id=None, secure_mode=None, success_url=None, cancel_url=None, language=None, customer=None):
        """
        UniversalPayTokenRequestPost - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'authorization_funds': 'Money',
            'tag': 'str',
            'credited_wallet_id': 'str',
            'secure_mode': 'str',
            'success_url': 'str',
            'cancel_url': 'str',
            'language': 'str',
            'customer': 'CustomerDetail'
        }

        self.attribute_map = {
            'authorization_funds': 'AuthorizationFunds',
            'tag': 'Tag',
            'credited_wallet_id': 'CreditedWalletId',
            'secure_mode': 'SecureMode',
            'success_url': 'SuccessUrl',
            'cancel_url': 'CancelUrl',
            'language': 'Language',
            'customer': 'Customer'
        }

        self._authorization_funds = authorization_funds
        self._tag = tag
        self._credited_wallet_id = credited_wallet_id
        self._secure_mode = secure_mode
        self._success_url = success_url
        self._cancel_url = cancel_url
        self._language = language
        self._customer = customer

    @property
    def authorization_funds(self):
        """
        Gets the authorization_funds of this UniversalPayTokenRequestPost.

        :return: The authorization_funds of this UniversalPayTokenRequestPost.
        :rtype: Money
        """
        return self._authorization_funds

    @authorization_funds.setter
    def authorization_funds(self, authorization_funds):
        """
        Sets the authorization_funds of this UniversalPayTokenRequestPost.

        :param authorization_funds: The authorization_funds of this UniversalPayTokenRequestPost.
        :type: Money
        """

        self._authorization_funds = authorization_funds

    @property
    def tag(self):
        """
        Gets the tag of this UniversalPayTokenRequestPost.
        Custom data that you can add to this item

        :return: The tag of this UniversalPayTokenRequestPost.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this UniversalPayTokenRequestPost.
        Custom data that you can add to this item

        :param tag: The tag of this UniversalPayTokenRequestPost.
        :type: str
        """

        self._tag = tag

    @property
    def credited_wallet_id(self):
        """
        Gets the credited_wallet_id of this UniversalPayTokenRequestPost.
        The ID of the wallet where money will be credited

        :return: The credited_wallet_id of this UniversalPayTokenRequestPost.
        :rtype: str
        """
        return self._credited_wallet_id

    @credited_wallet_id.setter
    def credited_wallet_id(self, credited_wallet_id):
        """
        Sets the credited_wallet_id of this UniversalPayTokenRequestPost.
        The ID of the wallet where money will be credited

        :param credited_wallet_id: The credited_wallet_id of this UniversalPayTokenRequestPost.
        :type: str
        """
        if credited_wallet_id is None:
            raise ValueError("Invalid value for `credited_wallet_id`, must not be `None`")

        self._credited_wallet_id = credited_wallet_id

    @property
    def secure_mode(self):
        """
        Gets the secure_mode of this UniversalPayTokenRequestPost.

        :return: The secure_mode of this UniversalPayTokenRequestPost.
        :rtype: str
        """
        return self._secure_mode

    @secure_mode.setter
    def secure_mode(self, secure_mode):
        """
        Sets the secure_mode of this UniversalPayTokenRequestPost.

        :param secure_mode: The secure_mode of this UniversalPayTokenRequestPost.
        :type: str
        """
        allowed_values = ["NotSpecified", "DEFAULT", "FORCE"]
        if secure_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `secure_mode` ({0}), must be one of {1}"
                .format(secure_mode, allowed_values)
            )

        self._secure_mode = secure_mode

    @property
    def success_url(self):
        """
        Gets the success_url of this UniversalPayTokenRequestPost.
        Url to redirect the browser in case the payment is completed successfully

        :return: The success_url of this UniversalPayTokenRequestPost.
        :rtype: str
        """
        return self._success_url

    @success_url.setter
    def success_url(self, success_url):
        """
        Sets the success_url of this UniversalPayTokenRequestPost.
        Url to redirect the browser in case the payment is completed successfully

        :param success_url: The success_url of this UniversalPayTokenRequestPost.
        :type: str
        """

        self._success_url = success_url

    @property
    def cancel_url(self):
        """
        Gets the cancel_url of this UniversalPayTokenRequestPost.
        Url to redirect the browser in case the payment is not completed successfully

        :return: The cancel_url of this UniversalPayTokenRequestPost.
        :rtype: str
        """
        return self._cancel_url

    @cancel_url.setter
    def cancel_url(self, cancel_url):
        """
        Sets the cancel_url of this UniversalPayTokenRequestPost.
        Url to redirect the browser in case the payment is not completed successfully

        :param cancel_url: The cancel_url of this UniversalPayTokenRequestPost.
        :type: str
        """

        self._cancel_url = cancel_url

    @property
    def language(self):
        """
        Gets the language of this UniversalPayTokenRequestPost.
        Valid values are ES, EN, FR

        :return: The language of this UniversalPayTokenRequestPost.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this UniversalPayTokenRequestPost.
        Valid values are ES, EN, FR

        :param language: The language of this UniversalPayTokenRequestPost.
        :type: str
        """
        allowed_values = ["NotSpecified", "DE", "EN", "DA", "ES", "ET", "FI", "FR", "EL", "HU", "IT", "NL", "NO", "PL", "PT", "SK", "SV", "CS"]
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def customer(self):
        """
        Gets the customer of this UniversalPayTokenRequestPost.

        :return: The customer of this UniversalPayTokenRequestPost.
        :rtype: CustomerDetail
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """
        Sets the customer of this UniversalPayTokenRequestPost.

        :param customer: The customer of this UniversalPayTokenRequestPost.
        :type: CustomerDetail
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")

        self._customer = customer

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UniversalPayTokenRequestPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
