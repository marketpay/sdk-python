# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TelephoneSeur(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, prefix=None, country_code=None, number=None):
        """
        TelephoneSeur - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'prefix': 'str',
            'country_code': 'str',
            'number': 'str'
        }

        self.attribute_map = {
            'prefix': 'Prefix',
            'country_code': 'CountryCode',
            'number': 'Number'
        }

        self._prefix = prefix
        self._country_code = country_code
        self._number = number

    @property
    def prefix(self):
        """
        Gets the prefix of this TelephoneSeur.
        This field is deprecated. Use CountryCode instead

        :return: The prefix of this TelephoneSeur.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """
        Sets the prefix of this TelephoneSeur.
        This field is deprecated. Use CountryCode instead

        :param prefix: The prefix of this TelephoneSeur.
        :type: str
        """

        self._prefix = prefix

    @property
    def country_code(self):
        """
        Gets the country_code of this TelephoneSeur.

        :return: The country_code of this TelephoneSeur.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this TelephoneSeur.

        :param country_code: The country_code of this TelephoneSeur.
        :type: str
        """

        self._country_code = country_code

    @property
    def number(self):
        """
        Gets the number of this TelephoneSeur.

        :return: The number of this TelephoneSeur.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """
        Sets the number of this TelephoneSeur.

        :param number: The number of this TelephoneSeur.
        :type: str
        """

        self._number = number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TelephoneSeur):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
