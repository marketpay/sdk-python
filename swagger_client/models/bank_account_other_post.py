# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BankAccountOtherPost(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country': 'str',
        'bic': 'str',
        'account_number': 'str',
        'tag': 'str',
        'owner_address': 'Address',
        'owner_name': 'str'
    }

    attribute_map = {
        'country': 'Country',
        'bic': 'BIC',
        'account_number': 'AccountNumber',
        'tag': 'Tag',
        'owner_address': 'OwnerAddress',
        'owner_name': 'OwnerName'
    }

    def __init__(self, country=None, bic=None, account_number=None, tag=None, owner_address=None, owner_name=None):
        """
        BankAccountOtherPost - a model defined in Swagger
        """

        self._country = None
        self._bic = None
        self._account_number = None
        self._tag = None
        self._owner_address = None
        self._owner_name = None

        if country is not None:
          self.country = country
        if bic is not None:
          self.bic = bic
        if account_number is not None:
          self.account_number = account_number
        if tag is not None:
          self.tag = tag
        if owner_address is not None:
          self.owner_address = owner_address
        if owner_name is not None:
          self.owner_name = owner_name

    @property
    def country(self):
        """
        Gets the country of this BankAccountOtherPost.
        The Country where the bank account is held

        :return: The country of this BankAccountOtherPost.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this BankAccountOtherPost.
        The Country where the bank account is held

        :param country: The country of this BankAccountOtherPost.
        :type: str
        """
        allowed_values = ["NotSpecified", "AD", "AE", "AF", "AG", "AI", "AL", "AM", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"]
        if country not in allowed_values:
            raise ValueError(
                "Invalid value for `country` ({0}), must be one of {1}"
                .format(country, allowed_values)
            )

        self._country = country

    @property
    def bic(self):
        """
        Gets the bic of this BankAccountOtherPost.
        The BIC of the bank account

        :return: The bic of this BankAccountOtherPost.
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """
        Sets the bic of this BankAccountOtherPost.
        The BIC of the bank account

        :param bic: The bic of this BankAccountOtherPost.
        :type: str
        """

        self._bic = bic

    @property
    def account_number(self):
        """
        Gets the account_number of this BankAccountOtherPost.
        The account number of the bank account. Must be numbers only. Canadian account numbers must be a maximum of 20 digits

        :return: The account_number of this BankAccountOtherPost.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """
        Sets the account_number of this BankAccountOtherPost.
        The account number of the bank account. Must be numbers only. Canadian account numbers must be a maximum of 20 digits

        :param account_number: The account_number of this BankAccountOtherPost.
        :type: str
        """

        self._account_number = account_number

    @property
    def tag(self):
        """
        Gets the tag of this BankAccountOtherPost.
        Custom data that you can add to this item

        :return: The tag of this BankAccountOtherPost.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this BankAccountOtherPost.
        Custom data that you can add to this item

        :param tag: The tag of this BankAccountOtherPost.
        :type: str
        """

        self._tag = tag

    @property
    def owner_address(self):
        """
        Gets the owner_address of this BankAccountOtherPost.
        The address of the owner of the bank account

        :return: The owner_address of this BankAccountOtherPost.
        :rtype: Address
        """
        return self._owner_address

    @owner_address.setter
    def owner_address(self, owner_address):
        """
        Sets the owner_address of this BankAccountOtherPost.
        The address of the owner of the bank account

        :param owner_address: The owner_address of this BankAccountOtherPost.
        :type: Address
        """

        self._owner_address = owner_address

    @property
    def owner_name(self):
        """
        Gets the owner_name of this BankAccountOtherPost.
        The name of the owner of the bank account

        :return: The owner_name of this BankAccountOtherPost.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """
        Sets the owner_name of this BankAccountOtherPost.
        The name of the owner of the bank account

        :param owner_name: The owner_name of this BankAccountOtherPost.
        :type: str
        """

        self._owner_name = owner_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BankAccountOtherPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
