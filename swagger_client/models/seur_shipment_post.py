# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SeurShipmentPost(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, tag=None, pick_up_date=None, sender=None, receiver=None, sender_user_id=None, receiver_user_id=None, product=None):
        """
        SeurShipmentPost - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'tag': 'str',
            'pick_up_date': 'int',
            'sender': 'ShipmentActor',
            'receiver': 'ShipmentActor',
            'sender_user_id': 'str',
            'receiver_user_id': 'str',
            'product': 'Product'
        }

        self.attribute_map = {
            'tag': 'Tag',
            'pick_up_date': 'PickUpDate',
            'sender': 'Sender',
            'receiver': 'Receiver',
            'sender_user_id': 'SenderUserId',
            'receiver_user_id': 'ReceiverUserId',
            'product': 'Product'
        }

        self._tag = tag
        self._pick_up_date = pick_up_date
        self._sender = sender
        self._receiver = receiver
        self._sender_user_id = sender_user_id
        self._receiver_user_id = receiver_user_id
        self._product = product

    @property
    def tag(self):
        """
        Gets the tag of this SeurShipmentPost.
        Custom data that you can add to this item

        :return: The tag of this SeurShipmentPost.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this SeurShipmentPost.
        Custom data that you can add to this item

        :param tag: The tag of this SeurShipmentPost.
        :type: str
        """

        self._tag = tag

    @property
    def pick_up_date(self):
        """
        Gets the pick_up_date of this SeurShipmentPost.
        

        :return: The pick_up_date of this SeurShipmentPost.
        :rtype: int
        """
        return self._pick_up_date

    @pick_up_date.setter
    def pick_up_date(self, pick_up_date):
        """
        Sets the pick_up_date of this SeurShipmentPost.
        

        :param pick_up_date: The pick_up_date of this SeurShipmentPost.
        :type: int
        """

        self._pick_up_date = pick_up_date

    @property
    def sender(self):
        """
        Gets the sender of this SeurShipmentPost.
        

        :return: The sender of this SeurShipmentPost.
        :rtype: ShipmentActor
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """
        Sets the sender of this SeurShipmentPost.
        

        :param sender: The sender of this SeurShipmentPost.
        :type: ShipmentActor
        """

        self._sender = sender

    @property
    def receiver(self):
        """
        Gets the receiver of this SeurShipmentPost.
        

        :return: The receiver of this SeurShipmentPost.
        :rtype: ShipmentActor
        """
        return self._receiver

    @receiver.setter
    def receiver(self, receiver):
        """
        Sets the receiver of this SeurShipmentPost.
        

        :param receiver: The receiver of this SeurShipmentPost.
        :type: ShipmentActor
        """

        self._receiver = receiver

    @property
    def sender_user_id(self):
        """
        Gets the sender_user_id of this SeurShipmentPost.
        The ID of the user sending the package

        :return: The sender_user_id of this SeurShipmentPost.
        :rtype: str
        """
        return self._sender_user_id

    @sender_user_id.setter
    def sender_user_id(self, sender_user_id):
        """
        Sets the sender_user_id of this SeurShipmentPost.
        The ID of the user sending the package

        :param sender_user_id: The sender_user_id of this SeurShipmentPost.
        :type: str
        """

        self._sender_user_id = sender_user_id

    @property
    def receiver_user_id(self):
        """
        Gets the receiver_user_id of this SeurShipmentPost.
        The ID of the user sending the package

        :return: The receiver_user_id of this SeurShipmentPost.
        :rtype: str
        """
        return self._receiver_user_id

    @receiver_user_id.setter
    def receiver_user_id(self, receiver_user_id):
        """
        Sets the receiver_user_id of this SeurShipmentPost.
        The ID of the user sending the package

        :param receiver_user_id: The receiver_user_id of this SeurShipmentPost.
        :type: str
        """

        self._receiver_user_id = receiver_user_id

    @property
    def product(self):
        """
        Gets the product of this SeurShipmentPost.
        

        :return: The product of this SeurShipmentPost.
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """
        Sets the product of this SeurShipmentPost.
        

        :param product: The product of this SeurShipmentPost.
        :type: Product
        """

        self._product = product

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SeurShipmentPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
