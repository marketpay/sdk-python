# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomApiErrorResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, message=None, type=None, id=None, date=None, errors=None):
        """
        CustomApiErrorResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'message': 'str',
            'type': 'str',
            'id': 'str',
            'date': 'int',
            'errors': 'dict(str, str)'
        }

        self.attribute_map = {
            'message': 'Message',
            'type': 'Type',
            'id': 'Id',
            'date': 'Date',
            'errors': 'errors'
        }

        self._message = message
        self._type = type
        self._id = id
        self._date = date
        self._errors = errors

    @property
    def message(self):
        """
        Gets the message of this CustomApiErrorResponse.

        :return: The message of this CustomApiErrorResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this CustomApiErrorResponse.

        :param message: The message of this CustomApiErrorResponse.
        :type: str
        """

        self._message = message

    @property
    def type(self):
        """
        Gets the type of this CustomApiErrorResponse.

        :return: The type of this CustomApiErrorResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this CustomApiErrorResponse.

        :param type: The type of this CustomApiErrorResponse.
        :type: str
        """

        self._type = type

    @property
    def id(self):
        """
        Gets the id of this CustomApiErrorResponse.

        :return: The id of this CustomApiErrorResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CustomApiErrorResponse.

        :param id: The id of this CustomApiErrorResponse.
        :type: str
        """

        self._id = id

    @property
    def date(self):
        """
        Gets the date of this CustomApiErrorResponse.

        :return: The date of this CustomApiErrorResponse.
        :rtype: int
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this CustomApiErrorResponse.

        :param date: The date of this CustomApiErrorResponse.
        :type: int
        """

        self._date = date

    @property
    def errors(self):
        """
        Gets the errors of this CustomApiErrorResponse.

        :return: The errors of this CustomApiErrorResponse.
        :rtype: dict(str, str)
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """
        Sets the errors of this CustomApiErrorResponse.

        :param errors: The errors of this CustomApiErrorResponse.
        :type: dict(str, str)
        """

        self._errors = errors

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomApiErrorResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
