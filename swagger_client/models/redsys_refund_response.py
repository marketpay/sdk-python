# coding: utf-8

"""
    MarketPay API

    API for Smart Contracts and Payments

    OpenAPI spec version: v2.01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RedsysRefundResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'debited_funds': 'Money',
        'credited_funds': 'Money',
        'fees': 'Money',
        'debited_wallet_id': 'str',
        'credited_wallet_id': 'str',
        'author_id': 'str',
        'credited_user_id': 'str',
        'nature': 'str',
        'status': 'str',
        'execution_date': 'int',
        'result_code': 'str',
        'result_message': 'str',
        'type': 'str',
        'initial_transaction_id': 'str',
        'initial_transaction_type': 'str',
        'refund_reason': 'RefundReason',
        'provider': 'RefundRedsysData',
        'id': 'str',
        'creation_date': 'int',
        'tag': 'str'
    }

    attribute_map = {
        'debited_funds': 'DebitedFunds',
        'credited_funds': 'CreditedFunds',
        'fees': 'Fees',
        'debited_wallet_id': 'DebitedWalletId',
        'credited_wallet_id': 'CreditedWalletId',
        'author_id': 'AuthorId',
        'credited_user_id': 'CreditedUserId',
        'nature': 'Nature',
        'status': 'Status',
        'execution_date': 'ExecutionDate',
        'result_code': 'ResultCode',
        'result_message': 'ResultMessage',
        'type': 'Type',
        'initial_transaction_id': 'InitialTransactionId',
        'initial_transaction_type': 'InitialTransactionType',
        'refund_reason': 'RefundReason',
        'provider': 'Provider',
        'id': 'Id',
        'creation_date': 'CreationDate',
        'tag': 'Tag'
    }

    def __init__(self, debited_funds=None, credited_funds=None, fees=None, debited_wallet_id=None, credited_wallet_id=None, author_id=None, credited_user_id=None, nature=None, status=None, execution_date=None, result_code=None, result_message=None, type=None, initial_transaction_id=None, initial_transaction_type=None, refund_reason=None, provider=None, id=None, creation_date=None, tag=None):
        """
        RedsysRefundResponse - a model defined in Swagger
        """

        self._debited_funds = None
        self._credited_funds = None
        self._fees = None
        self._debited_wallet_id = None
        self._credited_wallet_id = None
        self._author_id = None
        self._credited_user_id = None
        self._nature = None
        self._status = None
        self._execution_date = None
        self._result_code = None
        self._result_message = None
        self._type = None
        self._initial_transaction_id = None
        self._initial_transaction_type = None
        self._refund_reason = None
        self._provider = None
        self._id = None
        self._creation_date = None
        self._tag = None

        if debited_funds is not None:
          self.debited_funds = debited_funds
        if credited_funds is not None:
          self.credited_funds = credited_funds
        if fees is not None:
          self.fees = fees
        if debited_wallet_id is not None:
          self.debited_wallet_id = debited_wallet_id
        if credited_wallet_id is not None:
          self.credited_wallet_id = credited_wallet_id
        if author_id is not None:
          self.author_id = author_id
        if credited_user_id is not None:
          self.credited_user_id = credited_user_id
        if nature is not None:
          self.nature = nature
        if status is not None:
          self.status = status
        if execution_date is not None:
          self.execution_date = execution_date
        if result_code is not None:
          self.result_code = result_code
        if result_message is not None:
          self.result_message = result_message
        if type is not None:
          self.type = type
        if initial_transaction_id is not None:
          self.initial_transaction_id = initial_transaction_id
        if initial_transaction_type is not None:
          self.initial_transaction_type = initial_transaction_type
        if refund_reason is not None:
          self.refund_reason = refund_reason
        if provider is not None:
          self.provider = provider
        if id is not None:
          self.id = id
        if creation_date is not None:
          self.creation_date = creation_date
        if tag is not None:
          self.tag = tag

    @property
    def debited_funds(self):
        """
        Gets the debited_funds of this RedsysRefundResponse.
        Information about the funds that are being debited

        :return: The debited_funds of this RedsysRefundResponse.
        :rtype: Money
        """
        return self._debited_funds

    @debited_funds.setter
    def debited_funds(self, debited_funds):
        """
        Sets the debited_funds of this RedsysRefundResponse.
        Information about the funds that are being debited

        :param debited_funds: The debited_funds of this RedsysRefundResponse.
        :type: Money
        """

        self._debited_funds = debited_funds

    @property
    def credited_funds(self):
        """
        Gets the credited_funds of this RedsysRefundResponse.
        Details about the funds that are being credited (DebitedFunds – Fees = CreditedFunds)

        :return: The credited_funds of this RedsysRefundResponse.
        :rtype: Money
        """
        return self._credited_funds

    @credited_funds.setter
    def credited_funds(self, credited_funds):
        """
        Sets the credited_funds of this RedsysRefundResponse.
        Details about the funds that are being credited (DebitedFunds – Fees = CreditedFunds)

        :param credited_funds: The credited_funds of this RedsysRefundResponse.
        :type: Money
        """

        self._credited_funds = credited_funds

    @property
    def fees(self):
        """
        Gets the fees of this RedsysRefundResponse.
        Information about the fees that were taken by the client for this transaction (and were hence transferred to the Client's platform wallet)

        :return: The fees of this RedsysRefundResponse.
        :rtype: Money
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """
        Sets the fees of this RedsysRefundResponse.
        Information about the fees that were taken by the client for this transaction (and were hence transferred to the Client's platform wallet)

        :param fees: The fees of this RedsysRefundResponse.
        :type: Money
        """

        self._fees = fees

    @property
    def debited_wallet_id(self):
        """
        Gets the debited_wallet_id of this RedsysRefundResponse.
        The ID of the wallet that was debited

        :return: The debited_wallet_id of this RedsysRefundResponse.
        :rtype: str
        """
        return self._debited_wallet_id

    @debited_wallet_id.setter
    def debited_wallet_id(self, debited_wallet_id):
        """
        Sets the debited_wallet_id of this RedsysRefundResponse.
        The ID of the wallet that was debited

        :param debited_wallet_id: The debited_wallet_id of this RedsysRefundResponse.
        :type: str
        """

        self._debited_wallet_id = debited_wallet_id

    @property
    def credited_wallet_id(self):
        """
        Gets the credited_wallet_id of this RedsysRefundResponse.
        The ID of the wallet where money will be credited

        :return: The credited_wallet_id of this RedsysRefundResponse.
        :rtype: str
        """
        return self._credited_wallet_id

    @credited_wallet_id.setter
    def credited_wallet_id(self, credited_wallet_id):
        """
        Sets the credited_wallet_id of this RedsysRefundResponse.
        The ID of the wallet where money will be credited

        :param credited_wallet_id: The credited_wallet_id of this RedsysRefundResponse.
        :type: str
        """

        self._credited_wallet_id = credited_wallet_id

    @property
    def author_id(self):
        """
        Gets the author_id of this RedsysRefundResponse.
        A user's ID

        :return: The author_id of this RedsysRefundResponse.
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """
        Sets the author_id of this RedsysRefundResponse.
        A user's ID

        :param author_id: The author_id of this RedsysRefundResponse.
        :type: str
        """

        self._author_id = author_id

    @property
    def credited_user_id(self):
        """
        Gets the credited_user_id of this RedsysRefundResponse.
        The user ID who was credited

        :return: The credited_user_id of this RedsysRefundResponse.
        :rtype: str
        """
        return self._credited_user_id

    @credited_user_id.setter
    def credited_user_id(self, credited_user_id):
        """
        Sets the credited_user_id of this RedsysRefundResponse.
        The user ID who was credited

        :param credited_user_id: The credited_user_id of this RedsysRefundResponse.
        :type: str
        """

        self._credited_user_id = credited_user_id

    @property
    def nature(self):
        """
        Gets the nature of this RedsysRefundResponse.
        The nature of the transaction

        :return: The nature of this RedsysRefundResponse.
        :rtype: str
        """
        return self._nature

    @nature.setter
    def nature(self, nature):
        """
        Sets the nature of this RedsysRefundResponse.
        The nature of the transaction

        :param nature: The nature of this RedsysRefundResponse.
        :type: str
        """
        allowed_values = ["REGULAR", "REFUND", "REPUDIATION", "SETTLEMENT"]
        if nature not in allowed_values:
            raise ValueError(
                "Invalid value for `nature` ({0}), must be one of {1}"
                .format(nature, allowed_values)
            )

        self._nature = nature

    @property
    def status(self):
        """
        Gets the status of this RedsysRefundResponse.
        The status of the transaction

        :return: The status of this RedsysRefundResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this RedsysRefundResponse.
        The status of the transaction

        :param status: The status of this RedsysRefundResponse.
        :type: str
        """
        allowed_values = ["CREATED", "SUCCEEDED", "FAILED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def execution_date(self):
        """
        Gets the execution_date of this RedsysRefundResponse.
        When the transaction happened

        :return: The execution_date of this RedsysRefundResponse.
        :rtype: int
        """
        return self._execution_date

    @execution_date.setter
    def execution_date(self, execution_date):
        """
        Sets the execution_date of this RedsysRefundResponse.
        When the transaction happened

        :param execution_date: The execution_date of this RedsysRefundResponse.
        :type: int
        """

        self._execution_date = execution_date

    @property
    def result_code(self):
        """
        Gets the result_code of this RedsysRefundResponse.
        The result code

        :return: The result_code of this RedsysRefundResponse.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """
        Sets the result_code of this RedsysRefundResponse.
        The result code

        :param result_code: The result_code of this RedsysRefundResponse.
        :type: str
        """

        self._result_code = result_code

    @property
    def result_message(self):
        """
        Gets the result_message of this RedsysRefundResponse.
        A verbal explanation of the ResultCode

        :return: The result_message of this RedsysRefundResponse.
        :rtype: str
        """
        return self._result_message

    @result_message.setter
    def result_message(self, result_message):
        """
        Sets the result_message of this RedsysRefundResponse.
        A verbal explanation of the ResultCode

        :param result_message: The result_message of this RedsysRefundResponse.
        :type: str
        """

        self._result_message = result_message

    @property
    def type(self):
        """
        Gets the type of this RedsysRefundResponse.
        The type of the transaction

        :return: The type of this RedsysRefundResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this RedsysRefundResponse.
        The type of the transaction

        :param type: The type of this RedsysRefundResponse.
        :type: str
        """
        allowed_values = ["PAYIN", "PAYOUT", "TRANSFER"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def initial_transaction_id(self):
        """
        Gets the initial_transaction_id of this RedsysRefundResponse.
        The initial transaction ID

        :return: The initial_transaction_id of this RedsysRefundResponse.
        :rtype: str
        """
        return self._initial_transaction_id

    @initial_transaction_id.setter
    def initial_transaction_id(self, initial_transaction_id):
        """
        Sets the initial_transaction_id of this RedsysRefundResponse.
        The initial transaction ID

        :param initial_transaction_id: The initial_transaction_id of this RedsysRefundResponse.
        :type: str
        """

        self._initial_transaction_id = initial_transaction_id

    @property
    def initial_transaction_type(self):
        """
        Gets the initial_transaction_type of this RedsysRefundResponse.
        The initial transaction type

        :return: The initial_transaction_type of this RedsysRefundResponse.
        :rtype: str
        """
        return self._initial_transaction_type

    @initial_transaction_type.setter
    def initial_transaction_type(self, initial_transaction_type):
        """
        Sets the initial_transaction_type of this RedsysRefundResponse.
        The initial transaction type

        :param initial_transaction_type: The initial_transaction_type of this RedsysRefundResponse.
        :type: str
        """
        allowed_values = ["NotSpecified", "PAYIN", "TRANSFER", "PAYOUT"]
        if initial_transaction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `initial_transaction_type` ({0}), must be one of {1}"
                .format(initial_transaction_type, allowed_values)
            )

        self._initial_transaction_type = initial_transaction_type

    @property
    def refund_reason(self):
        """
        Gets the refund_reason of this RedsysRefundResponse.
        Contains info about the reason for refund

        :return: The refund_reason of this RedsysRefundResponse.
        :rtype: RefundReason
        """
        return self._refund_reason

    @refund_reason.setter
    def refund_reason(self, refund_reason):
        """
        Sets the refund_reason of this RedsysRefundResponse.
        Contains info about the reason for refund

        :param refund_reason: The refund_reason of this RedsysRefundResponse.
        :type: RefundReason
        """

        self._refund_reason = refund_reason

    @property
    def provider(self):
        """
        Gets the provider of this RedsysRefundResponse.
        Redsys related data

        :return: The provider of this RedsysRefundResponse.
        :rtype: RefundRedsysData
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this RedsysRefundResponse.
        Redsys related data

        :param provider: The provider of this RedsysRefundResponse.
        :type: RefundRedsysData
        """

        self._provider = provider

    @property
    def id(self):
        """
        Gets the id of this RedsysRefundResponse.
        The item's ID

        :return: The id of this RedsysRefundResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RedsysRefundResponse.
        The item's ID

        :param id: The id of this RedsysRefundResponse.
        :type: str
        """

        self._id = id

    @property
    def creation_date(self):
        """
        Gets the creation_date of this RedsysRefundResponse.
        When the item was created

        :return: The creation_date of this RedsysRefundResponse.
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """
        Sets the creation_date of this RedsysRefundResponse.
        When the item was created

        :param creation_date: The creation_date of this RedsysRefundResponse.
        :type: int
        """

        self._creation_date = creation_date

    @property
    def tag(self):
        """
        Gets the tag of this RedsysRefundResponse.
        Custom data that you can add to this item

        :return: The tag of this RedsysRefundResponse.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this RedsysRefundResponse.
        Custom data that you can add to this item

        :param tag: The tag of this RedsysRefundResponse.
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RedsysRefundResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
